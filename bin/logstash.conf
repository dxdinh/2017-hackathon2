input {
    file {
		type => "astm"  # a type to identify those logs (will need this later)
        path => ["C:/hackathon/data/*.txt"]	
        start_position => beginning
    }
    file {
		type => "meditech"  # a type to identify those logs (will need this later)
        path => ["C:/hackathon/Meditech/*.txt"]	
        start_position => beginning
    }
}

filter {
  if [type] == "astm" {   # this is where we use the type from the input section
    grok {
	  patterns_dir => ["C:/hackathon/patterns"]
      match => [ "message", "^H\|%{GREEDYDATA:header}" ]

	  match => [ "message", "%{ASTM_R:rRecord}"]
	  match => [ "message", "^O\|%{GREEDYDATA:order}" ]
	  match => [ "message", "^C\|%{GREEDYDATA:columnC}" ]
	  match => [ "message", "^L\|%{GREEDYDATA:recordEnd}" ]	  	  
    }
	if "_grokparsefailure" in [tags] {
		mutate { 
			add_tag => "astm_failed_to_parse" 
		}		
	}
	if "ALB" in [analyte] {
		mutate { 
			add_field => { "analyteCode" => "7" } 
		}		
	}

  }
  
  
  
  if [type] == "meditech" {   # this is where we use the type from the input section
    grok {
	  patterns_dir => ["C:/hackathon/patterns"]	  
	  match => [ "message", "Test: %{GREEDYDATA:analyteName}" ]
	  match => [ "message", "Control: %{GREEDYDATA:product}Lot:%{GREEDYDATA:lotNumber}Exp: %{GREEDYDATA:exp}Method:%{GREEDYDATA:method}" ]
	  match => [ "message", "%{GREEDYDATA:dsDay}:%{GREEDYDATA:specimenID}%{GREEDYDATA:result}" ]	  	  
    }
	if "_grokparsefailure" in [tags] {
		mutate { 
			add_tag => "meditech_failed_to_parse" 
		}		
	}
	if "ALB" in [analyte] {
		mutate { 
			add_field => { "analyteCode" => "7" } 
		}		
	}

  }  
	
	
	mutate {
		add_field => { "token" => "hyDEgEzbpuuySaekLuWawGdjwUPclkwp" }
	} 
}
output {

    stdout {
		 codec => rubydebug
	}
	file 
	{
		codec => "json"
		path => ["C:/hackathon/output/astm_out.txt"]
	}
	
	tcp {
		host => "listener.logz.io"
		port => 5050
		codec => json_lines
	}	
	
}
